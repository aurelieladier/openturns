%feature("docstring") OT::LinearCombinationFunction
"Linear combination of functions.

Allows to create a function which is the linear combination of functions 
with scalar weights.

:math:`functionCollection  = (f_1, \hdots, f_N)`
where :math:`\forall 1 \leq i \leq N, \,     f_i: \Rset^n \rightarrow \Rset^{p}`
and :math:`scalarCoefficientColl = (c_1, \hdots, c_N) \in \Rset^N`
then the linear combination is:

.. math::

    linComb: \left|\begin{array}{rcl}
                  \Rset^n & \rightarrow & \Rset^{p} \\
                  \vect{X} & \mapsto & \displaystyle \sum_i c_if_i (\vect{X})
              \end{array}\right.

Available constructor:
    LinearCombinationFunction(*functionCollection, scalarCoefficientColl*)

Parameters
----------
functionCollection : sequence of :class:`~openturns.NumericalMathFunction`
    Collection of functions to sum.
scalarCoefficientColl : sequence of float
    Collection of scalar weights.

Examples
--------
>>> import openturns as ot
>>> functions = list()
>>> functions.append(ot.SymbolicFunction(['x1', 'x2', 'x3'],
...                                      ['x1^2 + x2', 'x1 + x2 + x3']))
>>> functions.append(ot.SymbolicFunction(['x1', 'x2', 'x3'],
...                                      ['x1 + 2 * x2 + x3', 'x1 + x2 - x3']))
>>> coefficients = [2.0, 4.0]
>>> myFunction2 = ot.LinearCombinationFunction(functions, coefficients)
>>> print(myFunction2([1.0, 2.0, 3.0]))
[38,12]"
