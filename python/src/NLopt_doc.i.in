%feature("docstring") OT::SLSQP
"Sequential Least-Squares Quadratic Programming solver.

Parameters
----------
problem : :class:`~openturns.OptimizationProblem`
    Optimization problem to solve.

See also
--------
AbdoRackwitz, Cobyla, SQP, TNC

Examples
--------
>>> import openturns as ot
>>> dim = 4
>>> bounds = ot.Interval([-3.0] * dim, [5.0] * dim)
>>> linear = ot.NumericalMathFunction(['x1', 'x2', 'x3', 'x4'], ['y1'], ['x1+2*x2-3*x3+4*x4'])
>>> problem = ot.OptimizationProblem(linear, ot.NumericalMathFunction(), ot.NumericalMathFunction(), bounds)
>>> algo = ot.SLSQP(problem)"




%feature("docstring") OT::LBFGS
"Low-storage BFGS algorithm.

Parameters
----------
problem : :class:`~openturns.OptimizationProblem`
    Optimization problem to solve.

See also
--------
AbdoRackwitz, Cobyla, SQP, TNC

Examples
--------
>>> import openturns as ot
>>> dim = 4
>>> bounds = ot.Interval([-3.0] * dim, [5.0] * dim)
>>> linear = ot.NumericalMathFunction(['x1', 'x2', 'x3', 'x4'], ['y1'], ['x1+2*x2-3*x3+4*x4'])
>>> problem = ot.OptimizationProblem(linear, ot.NumericalMathFunction(), ot.NumericalMathFunction(), bounds)
>>> algo = ot.LBFGS(problem)"




%feature("docstring") OT::NelderMead
"Nelder-Mead simplex algorithm.

Parameters
----------
problem : :class:`~openturns.OptimizationProblem`
    Optimization problem to solve.

See also
--------
AbdoRackwitz, Cobyla, SQP, TNC

Examples
--------
>>> import openturns as ot
>>> dim = 4
>>> bounds = ot.Interval([-3.0] * dim, [5.0] * dim)
>>> linear = ot.NumericalMathFunction(['x1', 'x2', 'x3', 'x4'], ['y1'], ['x1+2*x2-3*x3+4*x4'])
>>> problem = ot.OptimizationProblem(linear, ot.NumericalMathFunction(), ot.NumericalMathFunction(), bounds)
>>> algo = ot.NelderMead(problem)"
